{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-skp"
		},
		"DevDb_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'DevDb'"
		},
		"DevDb_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "127.0.0.1"
		},
		"DevDb_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "skp"
		},
		"DevDb_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "root"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Sales2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FilesStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sales2.csv",
						"folderPath": "inputfiles",
						"container": "filescontaineradf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "item",
						"type": "String"
					},
					{
						"name": "quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TotalAggEmployee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FilesStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "outputfiles",
						"container": "filescontaineradf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/inputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FilesStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containerName": {
						"type": "string"
					},
					"folderName": {
						"type": "string"
					},
					"sourcefileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().sourcefileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().containerName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FilesStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containername": {
						"type": "string"
					},
					"foldername": {
						"type": "string"
					},
					"targetfilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().targetfilename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().foldername",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().containername",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/skpjson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FilesStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "NewEmp.json",
						"folderPath": "inputfiles",
						"container": "filescontaineradf"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string"
						},
						"skills": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"contact": {
							"type": "object",
							"properties": {
								"mobile": {
									"type": "string"
								},
								"email": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DevDb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "MySql",
				"typeProperties": {
					"server": "[parameters('DevDb_properties_typeProperties_server')]",
					"port": 3306,
					"database": "[parameters('DevDb_properties_typeProperties_database')]",
					"username": "[parameters('DevDb_properties_typeProperties_username')]",
					"sslMode": 1,
					"useSystemTrustStore": 0,
					"password": {
						"type": "SecureString",
						"value": "[parameters('DevDb_password')]"
					},
					"driverVersion": "v2"
				},
				"connectVia": {
					"referenceName": "LocallyHosted",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cdccitizens')]",
			"type": "Microsoft.DataFactory/factories/adfcdcs",
			"apiVersion": "2018-06-01",
			"properties": {
				"SourceConnectionsInfo": [
					{
						"SourceEntities": [
							{
								"name": "dbo.citizens",
								"properties": {
									"schema": [
										{
											"name": "ID",
											"dataType": "integer"
										},
										{
											"name": "Name",
											"dataType": "string"
										}
									],
									"dslConnectorProperties": [
										{
											"name": "schemaName",
											"value": "dbo"
										},
										{
											"name": "tableName",
											"value": "citizens"
										},
										{
											"name": "enableNativeCdc",
											"value": true
										},
										{
											"name": "netChanges",
											"value": true
										},
										{
											"name": "allowSchemaDrift",
											"value": false
										},
										{
											"name": "inferDriftedColumnTypes",
											"value": false
										}
									]
								}
							}
						],
						"Connection": {
							"linkedService": {
								"referenceName": "LS_DevDB",
								"type": "LinkedServiceReference"
							},
							"linkedServiceType": "AzureSqlDatabase",
							"type": "linkedservicetype",
							"isInlineDataset": true,
							"commonDslConnectorProperties": [
								{
									"name": "allowSchemaDrift",
									"value": true
								},
								{
									"name": "inferDriftedColumnTypes",
									"value": true
								},
								{
									"name": "format",
									"value": "table"
								},
								{
									"name": "store",
									"value": "sqlserver"
								},
								{
									"name": "databaseType",
									"value": "databaseType"
								},
								{
									"name": "database",
									"value": "database"
								},
								{
									"name": "skipInitialLoad",
									"value": true
								}
							]
						}
					}
				],
				"TargetConnectionsInfo": [
					{
						"TargetEntities": [
							{
								"name": "dbo.citizensDW",
								"properties": {
									"schema": [
										{
											"name": "ID",
											"dataType": "integer"
										},
										{
											"name": "Name",
											"dataType": "string"
										}
									],
									"dslConnectorProperties": [
										{
											"name": "schemaName",
											"value": "dbo"
										},
										{
											"name": "tableName",
											"value": "citizensDW"
										},
										{
											"name": "allowSchemaDrift",
											"value": false
										},
										{
											"name": "inferDriftedColumnTypes",
											"value": false
										},
										{
											"name": "keys",
											"value": [
												"ID"
											]
										},
										{
											"name": "deletable",
											"value": true
										},
										{
											"name": "updateable",
											"value": true
										},
										{
											"name": "upsertable",
											"value": true
										},
										{
											"name": "defaultToUpsert",
											"value": true
										}
									]
								}
							}
						],
						"Connection": {
							"linkedService": {
								"referenceName": "LS_DevDB",
								"type": "LinkedServiceReference"
							},
							"linkedServiceType": "AzureSqlDatabase",
							"type": "linkedservicetype",
							"isInlineDataset": true,
							"commonDslConnectorProperties": [
								{
									"name": "allowSchemaDrift",
									"value": true
								},
								{
									"name": "inferDriftedColumnTypes",
									"value": true
								},
								{
									"name": "format",
									"value": "table"
								},
								{
									"name": "store",
									"value": "sqlserver"
								},
								{
									"name": "databaseType",
									"value": "databaseType"
								},
								{
									"name": "database",
									"value": "database"
								},
								{
									"name": "deletable",
									"value": false
								},
								{
									"name": "insertable",
									"value": true
								},
								{
									"name": "updateable",
									"value": false
								},
								{
									"name": "upsertable",
									"value": false
								},
								{
									"name": "skipDuplicateMapInputs",
									"value": true
								},
								{
									"name": "skipDuplicateMapOutputs",
									"value": true
								}
							]
						},
						"DataMapperMappings": [
							{
								"targetEntityName": "dbo.citizensDW",
								"sourceEntityName": "dbo.citizens",
								"sourceConnectionReference": {
									"connectionName": "LS_DevDB",
									"type": "linkedservicetype"
								},
								"attributeMappingInfo": {
									"attributeMappings": [
										{
											"name": "ID",
											"type": "Direct",
											"functionName": "",
											"attributeReference": {
												"name": "ID",
												"entity": "dbo.citizens",
												"entityConnectionReference": {
													"connectionName": "LS_DevDB",
													"type": "linkedservicetype"
												}
											}
										},
										{
											"name": "Name",
											"type": "Derived",
											"functionName": "upper",
											"expression": "upper(Name)",
											"attributeReferences": [
												{
													"name": "Name",
													"entity": "dbo.citizens",
													"entityConnectionReference": {
														"connectionName": "LS_DevDB",
														"type": "linkedservicetype"
													}
												}
											]
										}
									]
								}
							}
						],
						"Relationships": []
					}
				],
				"Policy": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1
					},
					"mode": "Microbatch"
				},
				"allowVNetOverride": false
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ReadOneOutToAnother')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata Childlist",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "MetaData",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachChilList",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata Childlist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata Childlist').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"FileName": {
						"type": "String"
					}
				},
				"annotations": [
					"Data"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copydata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "srctotgt",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "inputFile",
								"type": "DatasetReference",
								"parameters": {
									"containerName": {
										"value": "@pipeline().parameters.containerName",
										"type": "Expression"
									},
									"folderName": {
										"value": "@pipeline().parameters.srcfoldername",
										"type": "Expression"
									},
									"sourcefileName": {
										"value": "@pipeline().parameters.sourcefileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "outputfile",
								"type": "DatasetReference",
								"parameters": {
									"containername": {
										"value": "@pipeline().parameters.containerName",
										"type": "Expression"
									},
									"foldername": {
										"value": "@pipeline().parameters.tragetfoldername",
										"type": "Expression"
									},
									"targetfilename": {
										"value": "@pipeline().parameters.targetfileName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"containerName": {
						"type": "string",
						"defaultValue": "filescontaineradf"
					},
					"sourcefileName": {
						"type": "string",
						"defaultValue": "testinput.csv"
					},
					"targetfileName": {
						"type": "string",
						"defaultValue": "testoutput.csv"
					},
					"srcfoldername": {
						"type": "string",
						"defaultValue": "inputfiles"
					},
					"tragetfoldername": {
						"type": "string",
						"defaultValue": "outputfiles"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/inputFile')]",
				"[concat(variables('factoryId'), '/datasets/outputfile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DB_AggData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DevDb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "actor"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DevDb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_AggEmpByManagerId')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "EmpData"
						},
						{
							"dataset": {
								"referenceName": "DepartmentData",
								"type": "DatasetReference"
							},
							"name": "DepData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TotalAggEmployee",
								"type": "DatasetReference"
							},
							"name": "TotalAggEmployee"
						}
					],
					"transformations": [
						{
							"name": "AggByManagerId"
						},
						{
							"name": "JoinEmpDep"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpData",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as string,",
						"          LOCATION_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DepData",
						"JoinEmpDep aggregate(groupBy(EmpData@MANAGER_ID,",
						"          JOB_ID,",
						"          DEPARTMENT_NAME),",
						"     TotalAggEmployee = count(EMPLOYEE_ID)) ~> AggByManagerId",
						"EmpData, DepData join(EmpData@DEPARTMENT_ID == DepData@DEPARTMENT_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinEmpDep",
						"AggByManagerId sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['TotalAggEmployee.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          MANAGER_ID,",
						"          TotalAggEmployee,",
						"          JOB_ID,",
						"          DEPARTMENT_NAME",
						"     ),",
						"     partitionBy('hash', 1)) ~> TotalAggEmployee"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TotalAggEmployee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_AlterRowTransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "EmpData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Emp_Altered",
								"type": "DatasetReference"
							},
							"name": "EmpAltered"
						}
					],
					"transformations": [
						{
							"name": "alterRow"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as integer,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpData",
						"EmpData alterRow(deleteIf(DEPARTMENT_ID=='50'),",
						"     updateIf(DEPARTMENT_ID=='20')) ~> alterRow",
						"alterRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          empid as integer,",
						"          empFirstName as string,",
						"          empLastName as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as integer,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['empid'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          empid = EMPLOYEE_ID,",
						"          empFirstName = FIRST_NAME,",
						"          empLastName = LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID,",
						"          DEPARTMENT_ID",
						"     )) ~> EmpAltered"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_AssertTrasnformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "empData"
						},
						{
							"dataset": {
								"referenceName": "DepartmentData",
								"type": "DatasetReference"
							},
							"name": "DepData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OutPutDataSet",
								"type": "DatasetReference"
							},
							"name": "AssertCheckOut"
						}
					],
					"transformations": [
						{
							"name": "AssertCheckHireDate"
						},
						{
							"name": "dcErrorCheck"
						},
						{
							"name": "filterGoodRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empData",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as string,",
						"          LOCATION_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DepData",
						"empData, DepData assert(expectTrue(!isNull(toDate(HIRE_DATE,'dd-MMM-yy')), false, 'assertHireDate', null, 'check hire date format for all rows'),",
						"     expectUnique(EMPLOYEE_ID, false, 'assertUniqueEmpId', null, 'check unique emp id'),",
						"     expectExists(empData@DEPARTMENT_ID == DepData@DEPARTMENT_ID, false, 'assertCheckDep', null, 'check if dept id is presetn in both')) ~> AssertCheckHireDate",
						"AssertCheckHireDate derive(IsErrorRow = isError(),",
						"          IsHasErrorInEmpId = hasError('assertUniqueEmpId')) ~> dcErrorCheck",
						"dcErrorCheck filter(IsErrorRow==false()) ~> filterGoodRows",
						"filterGoodRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['AssertCheckOut.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> AssertCheckOut"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CDC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CitizenData",
								"type": "DatasetReference"
							},
							"name": "CitizenData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CitizensDW",
								"type": "DatasetReference"
							},
							"name": "CitizensDW"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          ID as integer,",
						"          Name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     enableNativeCdc: true,",
						"     netChanges: true,",
						"     skipInitialLoad: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> CitizenData",
						"CitizenData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Name as string",
						"     ),",
						"     deletable:true,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:true,",
						"     keys:['ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> CitizensDW"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CastTransofmration')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "EmpData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OutPutDataSet",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "castStringtoInt"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpData",
						"EmpData cast(output(",
						"          EMPLOYEE_ID as integer,",
						"          FIRST_NAME as string,",
						"          HIRE_DATE as date 'dd-MMM-yyyy'",
						"     ),",
						"     errors: true) ~> castStringtoInt",
						"castStringtoInt sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ContiontionalTrans')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "EmpData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ITEmpData",
								"type": "DatasetReference"
							},
							"name": "ITEmpData"
						},
						{
							"dataset": {
								"referenceName": "HrEmpData",
								"type": "DatasetReference"
							},
							"name": "HREmpData"
						},
						{
							"dataset": {
								"referenceName": "FinanceEmpData",
								"type": "DatasetReference"
							},
							"name": "FinanceEmpData"
						},
						{
							"dataset": {
								"referenceName": "OtherEmpData",
								"type": "DatasetReference"
							},
							"name": "OtherEmpData"
						}
					],
					"transformations": [
						{
							"name": "SplitOnDeparment"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpData",
						"EmpData split(equals(DEPARTMENT_ID,'60'),",
						"     equals(DEPARTMENT_ID,'40'),",
						"     equals(DEPARTMENT_ID,'100'),",
						"     disjoint: false) ~> SplitOnDeparment@(ITEmployees, HREmployees, FinanceEmployees, OtherEmployee)",
						"SplitOnDeparment@ITEmployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['ITEmployeeData.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ITEmpData",
						"SplitOnDeparment@HREmployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['HrEmpData.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> HREmpData",
						"SplitOnDeparment@FinanceEmployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['FinanceEmpData.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> FinanceEmpData",
						"SplitOnDeparment@OtherEmployee sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['OtherEmpData.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OtherEmpData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DerivedColumn')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "EmpData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DerivedNewColumnData",
								"type": "DatasetReference"
							},
							"name": "DerivedData"
						}
					],
					"transformations": [
						{
							"name": "DerivedFirstName"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpData",
						"EmpData derive(FIRST_NAME = upper(FIRST_NAME),",
						"          NewFirstName = iif(COMMISSION_PCT==' - ','New','Old')) ~> DerivedFirstName",
						"DerivedFirstName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DerivedNewColumnData.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> DerivedData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_EmpDep')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "EmployeeData"
						},
						{
							"dataset": {
								"referenceName": "DepartmentData",
								"type": "DatasetReference"
							},
							"name": "DeparmentData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "JoinedDataEmpDep",
								"type": "DatasetReference"
							},
							"name": "OutputData",
							"rejectedDataLinkedService": {
								"referenceName": "FilesStorage",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "JoinEmpDepData"
						},
						{
							"name": "FirstNameUppar",
							"description": "Autogenerated by data preview actions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmployeeData",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as string,",
						"          LOCATION_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DeparmentData",
						"FirstNameUppar, DeparmentData join(EmployeeData@DEPARTMENT_ID == DeparmentData@DEPARTMENT_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinEmpDepData",
						"EmployeeData derive(FIRST_NAME = upper(FIRST_NAME)) ~> FirstNameUppar",
						"JoinEmpDepData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['JoinedDataEmpDep'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ExistNotExist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "EmpData"
						},
						{
							"dataset": {
								"referenceName": "DepartmentData",
								"type": "DatasetReference"
							},
							"name": "DepData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OutPutDataSet",
								"type": "DatasetReference"
							},
							"name": "ExistingData"
						}
					],
					"transformations": [
						{
							"name": "ExistManagerId"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpData",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as string,",
						"          LOCATION_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DepData",
						"EmpData, DepData exists(EmpData@DEPARTMENT_ID == DepData@DEPARTMENT_ID,",
						"     negate:true,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'both')~> ExistManagerId",
						"ExistManagerId sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['ExistingDataManagerID.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExistingData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_FilterEmp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "EmpData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FilteredManagerId100",
								"type": "DatasetReference"
							},
							"name": "ManagerId100"
						}
					],
					"transformations": [
						{
							"name": "filterPayrollDep"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpData",
						"EmpData filter(equals(MANAGER_ID,'100')) ~> filterPayrollDep",
						"filterPayrollDep sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Year as string,",
						"          Industry_aggregation_NZSIOC as string,",
						"          Industry_code_NZSIOC as string,",
						"          Industry_name_NZSIOC as string,",
						"          Units as string,",
						"          Variable_code as string,",
						"          Variable_name as string,",
						"          Variable_category as string,",
						"          Value as string,",
						"          Industry_code_ANZSIC06 as string",
						"     ),",
						"     partitionFileNames:['ManagerId100FilteredRecords.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ManagerId100"
					]
				}
			},
			"dependsOn": []
		}
	]
}