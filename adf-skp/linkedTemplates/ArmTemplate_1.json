{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-skp"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DB_AggData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DevDb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "actor"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_AggEmpByManagerId')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "EmpData"
						},
						{
							"dataset": {
								"referenceName": "DepartmentData",
								"type": "DatasetReference"
							},
							"name": "DepData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TotalAggEmployee",
								"type": "DatasetReference"
							},
							"name": "TotalAggEmployee"
						}
					],
					"transformations": [
						{
							"name": "AggByManagerId"
						},
						{
							"name": "JoinEmpDep"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpData",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as string,",
						"          LOCATION_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DepData",
						"JoinEmpDep aggregate(groupBy(EmpData@MANAGER_ID,",
						"          JOB_ID,",
						"          DEPARTMENT_NAME),",
						"     TotalAggEmployee = count(EMPLOYEE_ID)) ~> AggByManagerId",
						"EmpData, DepData join(EmpData@DEPARTMENT_ID == DepData@DEPARTMENT_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinEmpDep",
						"AggByManagerId sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['TotalAggEmployee.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          MANAGER_ID,",
						"          TotalAggEmployee,",
						"          JOB_ID,",
						"          DEPARTMENT_NAME",
						"     ),",
						"     partitionBy('hash', 1)) ~> TotalAggEmployee"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_AlterRowTransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "EmpData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Emp_Altered",
								"type": "DatasetReference"
							},
							"name": "EmpAltered"
						}
					],
					"transformations": [
						{
							"name": "alterRow"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as integer,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpData",
						"EmpData alterRow(deleteIf(DEPARTMENT_ID=='50'),",
						"     updateIf(DEPARTMENT_ID == '20')) ~> alterRow",
						"alterRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          empid as integer,",
						"          empFirstName as string,",
						"          empLastName as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as integer,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['empid'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          empid = EMPLOYEE_ID,",
						"          empFirstName = FIRST_NAME,",
						"          empLastName = LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID,",
						"          DEPARTMENT_ID",
						"     )) ~> EmpAltered"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ContiontionalTrans')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "EmpData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ITEmpData",
								"type": "DatasetReference"
							},
							"name": "ITEmpData"
						},
						{
							"dataset": {
								"referenceName": "HrEmpData",
								"type": "DatasetReference"
							},
							"name": "HREmpData"
						},
						{
							"dataset": {
								"referenceName": "FinanceEmpData",
								"type": "DatasetReference"
							},
							"name": "FinanceEmpData"
						},
						{
							"dataset": {
								"referenceName": "OtherEmpData",
								"type": "DatasetReference"
							},
							"name": "OtherEmpData"
						}
					],
					"transformations": [
						{
							"name": "SplitOnDeparment"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpData",
						"EmpData split(equals(DEPARTMENT_ID,'60'),",
						"     equals(DEPARTMENT_ID,'40'),",
						"     equals(DEPARTMENT_ID,'100'),",
						"     disjoint: false) ~> SplitOnDeparment@(ITEmployees, HREmployees, FinanceEmployees, OtherEmployee)",
						"SplitOnDeparment@ITEmployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['ITEmployeeData.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ITEmpData",
						"SplitOnDeparment@HREmployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['HrEmpData.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> HREmpData",
						"SplitOnDeparment@FinanceEmployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['FinanceEmpData.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> FinanceEmpData",
						"SplitOnDeparment@OtherEmployee sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['OtherEmpData.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OtherEmpData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DerivedColumn')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "EmpData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DerivedNewColumnData",
								"type": "DatasetReference"
							},
							"name": "DerivedData"
						}
					],
					"transformations": [
						{
							"name": "DerivedFirstName"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpData",
						"EmpData derive(FIRST_NAME = upper(FIRST_NAME),",
						"          NewFirstName = iif(COMMISSION_PCT==' - ','New','Old')) ~> DerivedFirstName",
						"DerivedFirstName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DerivedNewColumnData.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> DerivedData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_EmpDep')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "EmployeeData"
						},
						{
							"dataset": {
								"referenceName": "DepartmentData",
								"type": "DatasetReference"
							},
							"name": "DeparmentData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "JoinedDataEmpDep",
								"type": "DatasetReference"
							},
							"name": "OutputData",
							"rejectedDataLinkedService": {
								"referenceName": "FilesStorage",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "JoinEmpDepData"
						},
						{
							"name": "FirstNameUppar",
							"description": "Autogenerated by data preview actions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmployeeData",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as string,",
						"          LOCATION_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DeparmentData",
						"FirstNameUppar, DeparmentData join(EmployeeData@DEPARTMENT_ID == DeparmentData@DEPARTMENT_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinEmpDepData",
						"EmployeeData derive(FIRST_NAME = upper(FIRST_NAME)) ~> FirstNameUppar",
						"JoinEmpDepData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['JoinedDataEmpDep'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ExistNotExist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "EmpData"
						},
						{
							"dataset": {
								"referenceName": "DepartmentData",
								"type": "DatasetReference"
							},
							"name": "DepData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OutPutDataSet",
								"type": "DatasetReference"
							},
							"name": "ExistingData"
						}
					],
					"transformations": [
						{
							"name": "ExistManagerId"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpData",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as string,",
						"          LOCATION_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DepData",
						"EmpData, DepData exists(EmpData@DEPARTMENT_ID == DepData@DEPARTMENT_ID,",
						"     negate:true,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'both')~> ExistManagerId",
						"ExistManagerId sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['ExistingDataManagerID.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExistingData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_FilterEmp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "EmpData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FilteredManagerId100",
								"type": "DatasetReference"
							},
							"name": "ManagerId100"
						}
					],
					"transformations": [
						{
							"name": "filterPayrollDep"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpData",
						"EmpData filter(equals(MANAGER_ID,'100')) ~> filterPayrollDep",
						"filterPayrollDep sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Year as string,",
						"          Industry_aggregation_NZSIOC as string,",
						"          Industry_code_NZSIOC as string,",
						"          Industry_name_NZSIOC as string,",
						"          Units as string,",
						"          Variable_code as string,",
						"          Variable_name as string,",
						"          Variable_category as string,",
						"          Value as string,",
						"          Industry_code_ANZSIC06 as string",
						"     ),",
						"     partitionFileNames:['ManagerId100FilteredRecords.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ManagerId100"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_LookupTransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "EmpData"
						},
						{
							"dataset": {
								"referenceName": "DepartmentData",
								"type": "DatasetReference"
							},
							"name": "DepData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OutPutDataSet",
								"type": "DatasetReference"
							},
							"name": "LookUpData",
							"rejectedDataLinkedService": {
								"referenceName": "FilesStorage",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "LookupManagerId"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpData",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as string,",
						"          LOCATION_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DepData",
						"EmpData, DepData lookup(EmpData@DEPARTMENT_ID == DepData@DEPARTMENT_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupManagerId",
						"LookupManagerId sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['LookUpData.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> LookUpData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_PivotTrans')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "EmpData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OutPutDataSet",
								"type": "DatasetReference"
							},
							"name": "PivotData"
						}
					],
					"transformations": [
						{
							"name": "NumberEmpPerManagerId"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpData",
						"EmpData pivot(groupBy(DEPARTMENT_ID),",
						"     pivotBy(MANAGER_ID),",
						"     TotalNbrEmp = count(EMPLOYEE_ID),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> NumberEmpPerManagerId",
						"NumberEmpPerManagerId sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['PivotedData.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> PivotData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SelectTrans')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "EmpData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OutPutDataSet",
								"type": "DatasetReference"
							},
							"name": "ModifiedColumnsNames"
						}
					],
					"transformations": [
						{
							"name": "ModifyColumnName"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpData",
						"EmpData select(mapColumn(",
						"          EMAIL_nwn = EMAIL,",
						"          EMPLOYEE_ID_New = EMPLOYEE_ID,",
						"          FIRST_NAME_New = FIRST_NAME,",
						"          LAST_NAME_New = LAST_NAME,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID,",
						"          DEPARTMENT_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ModifyColumnName",
						"ModifyColumnName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['modyfiedColumnNm.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ModifiedColumnsNames"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SurrogateKeyTrans')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "EmpData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OutPutDataSet",
								"type": "DatasetReference"
							},
							"name": "EmpDataWithSurrogateKey"
						}
					],
					"transformations": [
						{
							"name": "NewSurrogateKey"
						},
						{
							"name": "RearrangeColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpData",
						"EmpData keyGenerate(output(NewSurrogateKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> NewSurrogateKey",
						"NewSurrogateKey select(mapColumn(",
						"          NewSurrogateKey,",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID,",
						"          DEPARTMENT_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RearrangeColumns",
						"RearrangeColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmpDataWithSurrogateKey.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> EmpDataWithSurrogateKey"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UnionTrans')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ITEmpData",
								"type": "DatasetReference"
							},
							"name": "ITEmpData"
						},
						{
							"dataset": {
								"referenceName": "HrEmpData",
								"type": "DatasetReference"
							},
							"name": "HREmpData"
						},
						{
							"dataset": {
								"referenceName": "FinanceEmpData",
								"type": "DatasetReference"
							},
							"name": "FinanceEmpData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OutPutDataSet",
								"type": "DatasetReference"
							},
							"name": "UnionAllEmpData"
						}
					],
					"transformations": [
						{
							"name": "UnionAllEmp"
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ITEmpData",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> HREmpData",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FinanceEmpData",
						"ITEmpData, HREmpData, FinanceEmpData union(byName: true)~> UnionAllEmp",
						"UnionAllEmp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['UnionAllEmp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> UnionAllEmpData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_WindowsTransformstion')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "EmpData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OutPutDataSet",
								"type": "DatasetReference"
							},
							"name": "DenseRankData"
						}
					],
					"transformations": [
						{
							"name": "WindowsTrans"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as integer,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpData",
						"EmpData window(over(DEPARTMENT_ID),",
						"     desc(SALARY, true),",
						"     DenseRank = denseRank()) ~> WindowsTrans",
						"WindowsTrans sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DenseRankData.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> DenseRankData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_newBranchCreation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "EmpData"
						},
						{
							"dataset": {
								"referenceName": "DepartmentData",
								"type": "DatasetReference"
							},
							"name": "DepData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OutPutDataSet",
								"type": "DatasetReference"
							},
							"name": "JoinedData"
						},
						{
							"dataset": {
								"referenceName": "OutPutDataSet",
								"type": "DatasetReference"
							},
							"name": "CountOfEmployee"
						}
					],
					"transformations": [
						{
							"name": "CountEmpInDep"
						},
						{
							"name": "JoinEmpDepData"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpData",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as string,",
						"          LOCATION_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DepData",
						"EmpData aggregate(groupBy(DEPARTMENT_ID),",
						"     TotalEmployee = count(EMPLOYEE_ID)) ~> CountEmpInDep",
						"EmpData, DepData join(EmpData@DEPARTMENT_ID == DepData@DEPARTMENT_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinEmpDepData",
						"JoinEmpDepData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['JoinedData.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> JoinedData",
						"CountEmpInDep sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Coutofemp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> CountOfEmployee"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/fd_SortTransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeData",
								"type": "DatasetReference"
							},
							"name": "EmpData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OutPutDataSet",
								"type": "DatasetReference"
							},
							"name": "SortedData"
						}
					],
					"transformations": [
						{
							"name": "SortFirstNameAsseding"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpData",
						"EmpData sort(asc(FIRST_NAME, true),",
						"     caseInsensitive: true) ~> SortFirstNameAsseding",
						"SortFirstNameAsseding sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['FirstNameSortedData.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SortedData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AggTransformation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_AggEmpByManagerId",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_AggEmpByManagerId",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmpData": {},
									"DepData": {},
									"TotalAggEmployee": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SrcEmpFile": {
						"type": "string"
					},
					"SrcDepFile": {
						"type": "string"
					},
					"test": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_AggEmpByManagerId')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Alteredtransformation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_AlterRowTransformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_AlterRowTransformation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmpData": {},
									"EmpAltered": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_AlterRowTransformation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DerviedColumnTrans')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_DerivedColumn",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "srcFileName",
								"value": "filescontaineradf/inputfiles/Employee.csv"
							}
						],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_DerivedColumn",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmpData": {},
									"DerivedData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_DerivedColumn')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExecuteDataFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EmpDep",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_EmpDep",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmployeeData": {},
									"DeparmentData": {},
									"OutputData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_EmpDep')]"
			]
		}
	]
}