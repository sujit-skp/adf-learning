{
	"name": "FlowletAssert",
	"properties": {
		"type": "Flowlet",
		"typeProperties": {
			"sources": [],
			"sinks": [],
			"transformations": [
				{
					"name": "AssertCheckHireDate"
				},
				{
					"name": "dcErrorCheck"
				},
				{
					"name": "filterGoodRows"
				},
				{
					"name": "empData"
				},
				{
					"name": "DepData"
				},
				{
					"name": "AssertCheckOut"
				}
			],
			"scriptLines": [
				"input(output(",
				"          EMPLOYEE_ID as string,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          EMAIL as string,",
				"          PHONE_NUMBER as string,",
				"          HIRE_DATE as string,",
				"          JOB_ID as string,",
				"          SALARY as string,",
				"          COMMISSION_PCT as string,",
				"          MANAGER_ID as string,",
				"          DEPARTMENT_ID as string",
				"     ),",
				"     order: 0,",
				"     allowSchemaDrift: true) ~> empData",
				"input(output(",
				"          DEPARTMENT_ID as string,",
				"          DEPARTMENT_NAME as string,",
				"          MANAGER_ID as string,",
				"          LOCATION_ID as string",
				"     ),",
				"     order: 1,",
				"     allowSchemaDrift: true) ~> DepData",
				"empData, DepData assert(expectTrue(!isNull(toDate(HIRE_DATE,'dd-MMM-yy')), false, 'assertHireDate', null, 'check hire date format for all rows'),",
				"     expectUnique(EMPLOYEE_ID, false, 'assertUniqueEmpId', null, 'check unique emp id'),",
				"     expectExists(empData@DEPARTMENT_ID == DepData@DEPARTMENT_ID, false, 'assertCheckDep', null, 'check if dept id is presetn in both')) ~> AssertCheckHireDate",
				"AssertCheckHireDate derive(IsErrorRow = isError(),",
				"          IsHasErrorInEmpId = hasError('assertUniqueEmpId')) ~> dcErrorCheck",
				"dcErrorCheck filter(IsErrorRow==false()) ~> filterGoodRows",
				"filterGoodRows output() ~> AssertCheckOut"
			]
		}
	}
}